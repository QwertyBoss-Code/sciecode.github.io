(function(){function Ja(){db.setStyle(d.color1).getHSL(Ka);w.material.color.getHSL(ia);w.material.color.setHSL(Ka.h+.045,ia.s,ia.l)}function La(b,c,a){return 1>(b/=.5)?a/2*b*b*b*b+c:-a/2*((b-=2)*b*b*b-2)+c}function eb(b,c){Ma=b;J=c;x=0;ja=ka=1;Na=document.getElementsByTagName("BODY")[0];document.getElementById("noticeText");q=document.getElementsByClassName("qualities");la=document.getElementById("quality_list");V=document.getElementById("quality_value");Oa=document.querySelector(".caret");M=document.getElementsByClassName("settings_items");
Pa=document.getElementById("settings_menu");Qa=document.getElementById("mb_value");ma=document.getElementById("color1_slider");na=document.getElementById("color2_slider");oa=document.getElementById("ela_slider");pa=document.getElementById("vis_slider");qa=document.getElementById("rad_slider");K=document.getElementById("ball_sphere_inside");ra=document.getElementById("brand");Ra=document.getElementById("overlay");sa=document.getElementById("fluid_ball");Sa=document.getElementById("st_btn");K.style.transform=
"scale("+d.radius/50;qa.addEventListener("mousemove",function(){d.radius=this.value;K=document.getElementById("ball_sphere_inside");K.style.transform="scale("+d.radius/50;var a=document.getElementById("rad_value");a.innerHTML=this.value;a=document.getElementById("rad_title_value");a.innerHTML=this.value},!1);qa.addEventListener("touchmove",function(){d.radius=this.value;K=document.getElementById("ball_sphere_inside");K.style.transform="scale("+d.radius/50;var a=document.getElementById("rad_value");
a.innerHTML=this.value;a=document.getElementById("rad_title_value");a.innerHTML=this.value},!1);pa.addEventListener("mousemove",function(){d.viscosity=this.value/100;var a=document.getElementById("vis_value");a.innerHTML=this.value;a=document.getElementById("vis_title_value");a.innerHTML=this.value;a=document.getElementById("fluid_box");a.style.background="rgba(78, 177, "+(219-140*d.viscosity/.3)+","+(.2+.2*d.viscosity/.3)+")";a.style.border="2px solid rgba(78, 177, "+(219-140*d.viscosity/.3)+", 1)"},
!1);pa.addEventListener("touchmove",function(){d.viscosity=this.value/100;var a=document.getElementById("vis_value");a.innerHTML=this.value;a=document.getElementById("vis_title_value");a.innerHTML=this.value;a=document.getElementById("fluid_box");a.style.background="rgba(78, 177, "+(219-140*d.viscosity/.3)+","+(.2+.2*d.viscosity/.3)+")";a.style.border="2px solid rgba(78, 177, "+(219-140*d.viscosity/.3)+", 1)"},!1);oa.addEventListener("mousemove",function(){d.elasticity=this.value/1E3;var a=document.getElementById("ela_value");
a.innerHTML=this.value;a=document.getElementById("ela_title_value");a.innerHTML=this.value},!1);oa.addEventListener("touchmove",function(){d.elasticity=this.value/1E3;var a=document.getElementById("ela_value");a.innerHTML=this.value;a=document.getElementById("ela_title_value");a.innerHTML=this.value},!1);ma.addEventListener("mousemove",function(){var a=new THREE.Color("hsl("+this.value+",  73%, 46%)");Ja();var b="#"+a.getHexString();d.color1=b;b=document.getElementById("color1_value");b.style.background=
"#"+a.getHexString();b=document.getElementById("color1_box");b.style.background="#"+a.getHexString()},!1);ma.addEventListener("touchmove",function(){var a=new THREE.Color("hsl("+this.value+",  73%, 46%)");Ja();var b="#"+a.getHexString();d.color1=b;b=document.getElementById("color1_value");b.style.background="#"+a.getHexString();b=document.getElementById("color1_box");b.style.background="#"+a.getHexString()},!1);na.addEventListener("mousemove",function(){var a=new THREE.Color("hsl("+this.value+",  73%, 46%)"),
b="#"+a.getHexString();d.color2=b;b=document.getElementById("color2_value");b.style.background="#"+a.getHexString();b=document.getElementById("color2_box");b.style.background="#"+a.getHexString()},!1);na.addEventListener("touchmove",function(){var a=new THREE.Color("hsl("+this.value+",  73%, 46%)"),b="#"+a.getHexString();d.color2=b;b=document.getElementById("color2_value");b.style.background="#"+a.getHexString();b=document.getElementById("color2_box");b.style.background="#"+a.getHexString()},!1);
Sa.addEventListener("click",function(){document.body.classList.remove("starting");document.body.classList.add("active");ra.classList.remove("nodelay");ra.classList.remove("brandInit");Ra.classList.add("invisible");Ta=!0;ta=Date.now();W=0},!1);Qa.addEventListener("click",function(){d.motionBlur=!d.motionBlur;var a=document.getElementById("motion_blur_title_value");this.classList.toggle("disabled");a.classList.toggle("disabled");d.motionBlur?(this.innerHTML="Enabled",a.innerHTML="Enabled"):(this.innerHTML=
"Disabled",a.innerHTML="Disabled")},!1);Pa.addEventListener("click",function(){this.classList.toggle("menu_active");document.getElementById("settings").classList.toggle("final_settings")},!1);b=0;for(c=M.length;b<c;b++)M[b].addEventListener("click",function(){for(var a=0,b=M.length;a<b;a++)M[a].classList.remove("selected_item");this.classList.add("selected_item")},!1);b=0;for(c=q.length;b<c;b++)q[b].addEventListener("click",function(a){a.preventDefault();if(this.dataset.quality!=d.quality){a=0;for(var b=
q.length;a<b;a++)q[a].classList.remove("selected"),q[a].classList.remove("recommended");this.classList.add("selected");la.classList.remove("vis");V.classList.remove("vis");V.innerHTML=this.innerHTML+' <span class="pn">'+65*Math.pow(2,this.dataset.quality)+'k</span><span class="caret"></span>';if(a=this.dataset.quality)d.quality=a;0==d.quality&&(d.useShadow=!1,d.TEXTURE_WIDTH=256,d.TEXTURE_HEIGHT=256,d.sizeRatio=1.89);1==d.quality&&(d.useShadow=!1,d.TEXTURE_WIDTH=256,d.TEXTURE_HEIGHT=512,d.sizeRatio=
1.46);2==d.quality&&(d.useShadow=!0,d.TEXTURE_WIDTH=512,d.TEXTURE_HEIGHT=512,d.sizeRatio=1.32);3==d.quality&&(d.useShadow=!0,d.TEXTURE_WIDTH=512,d.TEXTURE_HEIGHT=1024,d.sizeRatio=1.1);d.restart=!0}},!1),q[b].addEventListener("transitionend",function(){var a=this;setTimeout(function(){a.classList.remove("recommended")},800)},!1);V.addEventListener("click",function(){la.classList.toggle("vis");this.classList.toggle("vis");Oa.classList.toggle("vis")},!1);Na.classList.remove("hid");d.mobile?q[0].click():
q[2].click()}function fb(b){F.x=b.pageX/window.innerWidth*2-1;F.y=2*-(b.pageY/window.innerHeight)+1}function gb(b){1===b.touches.length&&(F.x=b.touches[0].pageX/window.innerWidth*2-1,F.y=2*-(b.touches[0].pageY/window.innerHeight)+1)}function hb(b){1===b.touches.length&&(F.x=b.touches[0].pageX/window.innerWidth*2-1,F.y=2*-(b.touches[0].pageY/window.innerHeight)+1)}function B(b,c,a,d){return b[0]*c+b[1]*a+b[2]*d}function ua(b){return b*b*b*(b*(6*b-15)+10)}function Ua(b,c){Va=c;document.addEventListener("mousemove",
fb,!1);document.addEventListener("touchstart",gb,!1);document.addEventListener("touchmove",hb,!1);l=d.TEXTURE_WIDTH;f=d.TEXTURE_HEIGHT;N=l*f;G=b;O=new THREE.Scene;P=new THREE.Camera;P.position.z=1;C=new Float32Array(4*N);for(b=0;b<l;b++)for(c=0;c<f;c++)C[b*f*4+4*c]=THREE.Math.randFloat(-1,1),C[b*f*4+4*c+1]=THREE.Math.randFloat(-1,1),C[b*f*4+4*c+2]=THREE.Math.randFloat(-1,1);b={};b.texture=new THREE.DataTexture(C,f,l,THREE.RGBAFormat,THREE.FloatType);b.texture.minFilter=THREE.NearestFilter;b.texture.magFilter=
THREE.NearestFilter;b.texture.needsUpdate=!0;b.texture.generateMipmaps=!1;b.texture.flipY=!1;Wa=b;b=new Float32Array(4*N);for(c=0;c<l;c++)for(var a=0;a<f;a++)b[c*f*4+4*a]=110-c/l*220,b[c*f*4+4*a+1]=0,b[c*f*4+4*a+2]=110-a/f*220;c={};c.texture=new THREE.DataTexture(b,f,l,THREE.RGBAFormat,THREE.FloatType);c.texture.minFilter=THREE.NearestFilter;c.texture.magFilter=THREE.NearestFilter;c.texture.needsUpdate=!0;c.texture.generateMipmaps=!1;c.texture.flipY=!1;X=c;Y=new THREE.ShaderMaterial({uniforms:{resolution:{type:"v2",
value:new THREE.Vector2(f,l)},texture:{type:"t"}},precision:d.precision,vertexShader:"\n\nvoid main() {\n    gl_Position = vec4( position, 1.0 );\n}\n",fragmentShader:"\n\nuniform vec2 resolution;\nuniform sampler2D texture;\n\nvoid main() {\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\n    gl_FragColor = texture2D( texture, uv );\n}\n"});Z=new THREE.ShaderMaterial({uniforms:{resolution:{type:"v2",value:new THREE.Vector2(f,l)},texturePosition:{type:"t"},textureVelocity:{type:"t"}},precision:d.precision,
vertexShader:"\n\nvoid main() {\n    gl_Position = vec4( position, 1.0 );\n}\n",fragmentShader:"\n\nuniform vec2 resolution;\nuniform sampler2D texturePosition;\nuniform sampler2D textureVelocity;\n\n#define PI 3.1415926535897932384626433832795\nvoid main() {\n\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\n\n    vec3 pos = texture2D( texturePosition, uv ).xyz;\n    vec3 vel = texture2D( textureVelocity, uv ).xyz;\n\t\tfloat life = texture2D( textureVelocity, uv ).w;\n\n    pos += vel;\n\n    gl_FragColor = vec4( pos, life );\n}\n",
blending:THREE.NoBlending,transparent:!1,depthWrite:!1,depthTest:!1});y=new THREE.ShaderMaterial({uniforms:{resolution:{type:"v2",value:new THREE.Vector2(f,l)},textureRandom:{type:"t",value:Wa.texture},texturePosition:{type:"t"},textureVelocity:{type:"t"},mousePosition:{type:"v3",value:new THREE.Vector3(0,0,0)},mousePrev:{type:"v3",value:new THREE.Vector3(0,0,0)},mouseVelocity:{type:"v3",value:new THREE.Vector3(0,0,0)},mouseRadius:{type:"f",value:d.radius},viscosity:{type:"f",value:d.viscosity},elasticity:{type:"f",
value:d.elasticity},defaultPosition:{type:"t",value:X.texture},dim:{type:"f",value:220},time:{type:"f",value:0}},precision:d.precision,vertexShader:"\n\nvoid main() {\n    gl_Position = vec4( position, 1.0 );\n}\n",fragmentShader:"\n\nuniform vec2 resolution;\nuniform sampler2D textureRandom;\nuniform sampler2D texturePosition;\nuniform sampler2D textureVelocity;\nuniform sampler2D defaultPosition;\nuniform vec3 mousePosition;\nuniform vec3 mousePrev;\nuniform vec3 mouseVelocity;\nuniform float mouseRadius;\nuniform float viscosity;\nuniform float elasticity;\nuniform float dim;\nuniform float time;\n\n#define PI 3.1415926535897932384626433832795\n\n//\tClassic Perlin 3D Noise\n//\tby Stefan Gustavson\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\nvec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\nfloat cnoise(vec3 P){\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod(Pi0, 289.0);\n  Pi1 = mod(Pi1, 289.0);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute(permute(ix) + iy);\n  vec4 ixy0 = permute(ixy + iz0);\n  vec4 ixy1 = permute(ixy + iz1);\n\n  vec4 gx0 = ixy0 / 7.0;\n  vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 / 7.0;\n  vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\nvec2 distToSegment( vec3 x1, vec3 x2, vec3 x0 ) {\n    vec3 v = x2 - x1;\n    vec3 w = x0 - x1;\n\n    float c1 = dot(w,v);\n    float c2 = dot(v,v);\n\n    if ( c1 <= 0.0 ) {\n        return vec2( distance( x0, x1 ), 0.0 );\n    }\n    if ( c2 <= c1) {\n        return vec2( distance( x0, x2), 1.0 );\n    }\n\n    float b = c1 / c2;\n    vec3 pb = x1 + b*v;\n    return vec2( distance( x0, pb ), b );\n}\n\nvoid main() {\n\n    vec2 uv = gl_FragCoord.xy / resolution.xy;\n\n    vec3 rand = texture2D( textureRandom, uv ).xyz;\n    vec3 cur = texture2D( texturePosition, uv ).xyz;\n    vec3 pos = texture2D( defaultPosition, uv ).xyz;\n    vec3 vel = texture2D( textureVelocity, uv ).xyz;\n\n    float x = ( dim/2.0 + pos.x ) / dim;\n    float z = ( dim/2.0 + pos.z ) / dim;\n\n    float res = 7.6;\n    pos.x += rand.x*1.0;\n    pos.y = cnoise( vec3(x*res, z*res/2.0, time) ) * 8.0 + rand.y*1.0;\n    pos.z += rand.z*1.0;\n\n    vec3 offset = (pos - cur);\n    vec2 dist = distToSegment(mousePrev, mousePosition, cur) / mouseRadius;\n\n    if ( dist.x <= 1.0 ) {\n        vel += offset*elasticity*1.0 - vel * viscosity;\n        vel += ( normalize( cur - ( mousePrev + ( mousePosition - mousePrev ) * dist.y ) ) * mix( 7.0, 0.1, dist.x ) + rand * 0.02 );\n    }\n    else {\n        vel += offset*elasticity - vel * viscosity;\n    }\n\n    gl_FragColor = vec4( vel, 1.0 );\n}\n",
blending:THREE.NoBlending,transparent:!1,depthWrite:!1,depthTest:!1});Q=new THREE.Mesh(new THREE.PlaneBufferGeometry(2,2),Y);O.add(Q);D=new THREE.WebGLRenderTarget(f,l,{wrapS:THREE.ClampToEdgeWrapping,wrapT:THREE.ClampToEdgeWrapping,minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat,type:d.mobile?THREE.HalfFloatType:THREE.FloatType,depthTest:!1,depthBuffer:!1,stencilBuffer:!1});R=D.clone();b={};b.texture=new THREE.DataTexture(new Float32Array(4*N),f,l,THREE.RGBAFormat,
THREE.FloatType);b.texture.minFilter=THREE.NearestFilter;b.texture.magFilter=THREE.NearestFilter;b.texture.needsUpdate=!0;b.texture.generateMipmaps=!1;b.texture.flipY=!1;aa(b,D);aa(D,R);A=new THREE.WebGLRenderTarget(f,l,{wrapS:THREE.ClampToEdgeWrapping,wrapT:THREE.ClampToEdgeWrapping,minFilter:THREE.NearestFilter,magFilter:THREE.NearestFilter,format:THREE.RGBAFormat,type:d.mobile?THREE.HalfFloatType:THREE.FloatType,depthTest:!1,depthWrite:!1,depthBuffer:!1,stencilBuffer:!1});S=A.clone();b=new Float32Array(4*
N);for(c=0;c<l;c++)for(a=0;a<f;a++){var e=c/l,m=a/f;b[c*f*4+4*a]=110-c/l*220+C[c*f*4+4*a];var p=c*f*4+4*a+1;e*=7.6;var n=7.6*m/2;m=va;var h=Math.floor(e),k=Math.floor(n),z=Math.floor(m);e-=h;n-=k;m-=z;h&=255;k&=255;z&=255;var q=g[h+g[k+g[z+1]]]%12,r=g[h+g[k+1+g[z]]]%12,t=g[h+g[k+1+g[z+1]]]%12,u=g[h+1+g[k+g[z]]]%12,v=g[h+1+g[k+g[z+1]]]%12,w=g[h+1+g[k+1+g[z]]]%12,x=g[h+1+g[k+1+g[z+1]]]%12;h=B(E[g[h+g[k+g[z]]]%12],e,n,m);u=B(E[u],e-1,n,m);r=B(E[r],e,n-1,m);w=B(E[w],e-1,n-1,m);q=B(E[q],e,n,m-1);v=B(E[v],
e-1,n,m-1);t=B(E[t],e,n-1,m-1);x=B(E[x],e-1,n-1,m-1);e=ua(e);n=ua(n);m=ua(m);b[p]=8*((1-m)*((1-n)*((1-e)*h+e*u)+n*((1-e)*r+e*w))+m*((1-n)*((1-e)*q+e*v)+n*((1-e)*t+e*x)))+1*C[c*f*4+4*a+1];b[c*f*4+4*a+2]=110-a/f*220+C[c*f*4+4*a+2]}c={};c.texture=new THREE.DataTexture(b,f,l,THREE.RGBAFormat,THREE.FloatType);c.texture.minFilter=THREE.NearestFilter;c.texture.magFilter=THREE.NearestFilter;c.texture.needsUpdate=!0;c.texture.generateMipmaps=!1;c.texture.flipY=!1;aa(c,A);aa(A,S)}function aa(b,c){Q.material=
Y;Y.uniforms.texture.value=b.texture;G.setRenderTarget(c);G.render(O,P)}function Xa(b){Ya=b;wa=d.TEXTURE_WIDTH;T=d.TEXTURE_HEIGHT;xa=wa*T;r=new THREE.ShaderMaterial({uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.shadowmap,THREE.UniformsLib.lights,{textureDefaultPosition:{type:"t",value:X},texturePosition:{type:"t",value:null},dim:{type:"f",value:0},sizeRatio:{type:"f",value:0},lightPos:{type:"v3",value:t.position},color1:{type:"c"},color2:{type:"c"},camera:{type:"v3"},befEnlargementNear:{type:"f",
value:h.befEnlargementNear},befEnlargementFar:{type:"f",value:h.befEnlargementFar},befEnlargementFactor:{type:"f",value:h.befEnlargementFactor},aftEnlargementNear:{type:"f",value:h.aftEnlargementNear},aftEnlargementFar:{type:"f",value:h.aftEnlargementFar},aftEnlargementFactor:{type:"f",value:h.aftEnlargementFactor},befOpacityNear:{type:"f",value:h.befOpacityNear},befOpacityFar:{type:"f",value:h.befOpacityFar},befOpacityBase:{type:"f",value:h.befOpacityBase},aftOpacityNear:{type:"f",value:h.aftOpacityNear},
aftOpacityFar:{type:"f",value:h.aftOpacityFar},aftOpacityBase:{type:"f",value:h.aftOpacityBase}}]),defines:{USE_SHADOW:d.useShadow},precision:d.precision,vertexShader:"\n\nuniform sampler2D textureDefaultPosition;\nuniform sampler2D texturePosition;\nuniform float sizeRatio;\nuniform float dim;\nuniform vec3 camera;\n\nuniform float befEnlargementNear;\nuniform float befEnlargementFar;\nuniform float befEnlargementFactor;\n\nuniform float aftEnlargementNear;\nuniform float aftEnlargementFar;\nuniform float aftEnlargementFactor;\n\nuniform float befOpacityNear;\nuniform float befOpacityFar;\nuniform float befOpacityBase;\n\nuniform float aftOpacityNear;\nuniform float aftOpacityFar;\nuniform float aftOpacityBase;\n\n\nvarying float ratio;\nvarying float vAlpha;\nvarying vec2 focalDirection;\nvarying vec3 vNormal;\nvarying vec3 pos;\n\n#include <common>\n#ifdef USE_SHADOW\n\t#include <shadowmap_pars_vertex>\n#endif\n\nfloat diameter;\n\nvoid main() {\n\n    vec3 def = texture2D( textureDefaultPosition, position.xy ).xyz;\n    pos = texture2D( texturePosition, position.xy ).xyz;\n\n    vNormal = pos - def;\n\n    float zRatio = (pos.z + dim/2.0 ) / dim;\n\n    ratio = zRatio;\n\n    vec4 worldPosition = modelMatrix * vec4( pos, 1.0 );\n    vec4 mvPosition = viewMatrix * worldPosition;\n\n    float focalLength = length(camera);\n\t\tfloat dist = focalLength + mvPosition.z;\n\n\t\tfloat size = pow(abs(sizeRatio*1.5), 1.2);\n\n    float aftEnlargementMax =  130.0 + ( (focalLength-150.0)/100.00 * 60.0);\n    float befEnlargementMax =  130.0 + ( (focalLength-150.0)/100.00 * 60.0);\n\n\t\tif ( dist < 0.0 ) {\n\t\t\tdiameter = size*( 1.0 + aftEnlargementFactor*smoothstep(aftEnlargementNear, aftEnlargementMax, abs(dist) ) );\n\t\t\tvAlpha = aftOpacityBase + (1.0 - aftOpacityBase)*(1.0 - smoothstep(aftOpacityNear, aftOpacityFar, abs(dist) ) );\n\t\t}\n\t\telse {\n\t\t\tdiameter = size*( 1.0 + befEnlargementFactor*smoothstep(befEnlargementNear, befEnlargementMax, abs(dist) ) );\n\t\t\tvAlpha = befOpacityBase + (1.0 - befOpacityBase)*(1.0 - smoothstep(befOpacityNear, befOpacityFar, abs(dist) ) );\n\t\t}\n\n    gl_PointSize = ( 1.27 - 0.3 * clamp( length(mvPosition.xyz) / 600.0 , 0.0, 1.0 ) ) * diameter;\n\n    gl_Position = projectionMatrix * mvPosition;\n    focalDirection = (gl_Position.xyz / gl_Position.w).xy;\n\n\t\t#ifdef USE_SHADOW\n    \t#include <shadowmap_vertex>\n\t\t#endif\n}\n",
fragmentShader:"\n\n#include <common>\n#include <packing>\n#include <bsdfs>\n\n#ifdef USE_SHADOW\n\t#include <lights_pars_begin>\n\t#include <shadowmap_pars_fragment>\n\t#include <shadowmask_pars_fragment>\n#endif\n\nuniform vec3 lightPos;\nuniform vec3 color1;\nuniform vec3 color2;\n\nvarying float ratio;\nvarying float vAlpha;\nvarying vec2 focalDirection;\nvarying vec3 vNormal;\nvarying vec3 pos;\n\nvoid main() {\n\n\tvec2 toCenter = (gl_PointCoord.xy - 0.5) * 2.0;\n\tfloat len = length(toCenter);\n\tif (len > 0.8) discard;\n\n  vec3 outgoingLight = mix(color2, color1, mix(0.0, 1.0, ratio))*1.0;\n  vec3 light = normalize(lightPos-pos);\n\n  float luminosity = smoothstep(0.2,1.0,(max( 0.0, dot( vNormal, vec3(0.0,1.0,0.0)) ) ) );\n  outgoingLight *= 0.15 + luminosity*0.1;\n\n  luminosity = smoothstep(0.88,1.0,(max( 0.0, dot( vec3(0.0,1.0,0.0), light) ) ) );\n  outgoingLight *= 0.25 + luminosity*0.75;\n\n\t#ifdef USE_SHADOW\n    float shadow = smoothstep(0.0, 0.2, getShadowMask());\n\t\toutgoingLight *= 0.65 + shadow*0.35;\n\t#endif\n\n  float alpha = vAlpha;\n\n  gl_FragColor = vec4( outgoingLight , 1.0 );\n\n}\n",
lights:!0,transparent:!0,blending:THREE.AdditiveBlending,depthTest:!1,depthWrite:!1});ya=new THREE.Color(d.color1);za=new THREE.Color(d.color2);r.uniforms.color1.value=ya;r.uniforms.color2.value=za;r.uniforms.dim.value=220;r.uniforms.sizeRatio.value=d.sizeRatio;Aa=new THREE.ShaderMaterial({uniforms:{lightPos:{type:"v3",value:t.position},texturePosition:{type:"t",value:null}},precision:d.precision,vertexShader:"\n\nuniform sampler2D texturePosition;\n\nvarying vec4 vWorldPosition;\n\nvoid main() {\n\n\tvec3 pos = texture2D( texturePosition, position.xy ).xyz;\n\n    vec4 worldPosition = modelMatrix * vec4( pos.xyz, 1.0 );\n    vec4 mvPosition = viewMatrix * worldPosition;\n\n    gl_PointSize = 1.0;\n\n    vWorldPosition = worldPosition;\n\n    gl_Position = projectionMatrix * mvPosition;\n\n}\n",
fragmentShader:"\n\nuniform vec3 lightPos;\nvarying vec4 vWorldPosition;\n\n#include <common>\n\nvec4 pack1K ( float depth ) {\n\n   depth /= 1000.0;\n   const vec4 bitSh = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\n   const vec4 bitMsk = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\n   vec4 res = fract( depth * bitSh );\n   res -= res.xxyz * bitMsk;\n   return res;\n\n}\n\nvoid main () {\n\n   gl_FragColor = pack1K( length( vWorldPosition.xyz - lightPos.xyz )*0.05 );\n\n}\n",
depthTest:!1,depthWrite:!1,side:THREE.BackSide,blending:THREE.NoBlending});b=new Float32Array(3*xa);for(var c=0;c<xa;c++){var a=3*c;b[a+0]=~~(c/T)/wa;b[a+1]=c%T/T}c=new THREE.BufferGeometry;c.addAttribute("position",new THREE.BufferAttribute(b,3));H=new THREE.Points(c,r);H.customDistanceMaterial=Aa;H.castShadow=!0;H.receiveShadow=!0}function Za(){d.restart&&(v.remove(H),d.restart=!1,Ua(p,k),Xa(k),v.add(H));requestAnimationFrame(Za);var b;if(Ta&&!$a)if(3500>W){Ba=Date.now();var c=Ba-ta;ta=Ba;W+=c;
var a=b=W/3500;c=1>(a/=.5)?65*a*a*a*a*a:65*((a-=2)*a*a*a*a+2);a=La(b,200,-90);b=La(b,0,-110);Ma.position.set(c,a,b)}else{$a=!0;J.enableZoom=!0;J.enableRotate=!0;J.maxPolarAngle=1.8*Math.PI/5;J.maxDistance=250;J.minDistance=150;c=document.querySelectorAll(".delay");b=0;for(a=c.length;b<a;b++)c[b].classList.remove("delay");c=document.querySelectorAll(".inactive");b=0;for(a=c.length;b<a;b++)c[b].classList.remove("inactive")}if(sa.parentNode.classList.contains("selected_item")){if(130<x||0>x)ka*=-1;ja=
35<x&&95>x?1-.6*d.viscosity/.3:1.5;x+=ka*ja;sa.style.transform="translateX("+x+"px) translateY(-20px)"}I.update();ba=Date.now();c=ba-ab;ab=ba;va+=Math.min(c/1200,1/8);Ca.copy(ca);bb.setFromCamera(F,Va);bb.ray.intersectPlane(ib,Da);null!=Da&&ca.copy(Da);Ea.copy(ca.clone().sub(Ca));Ea.y=0;c=D;D=R;R=c;Q.material=y;y.uniforms.mouseRadius.value=d.radius;y.uniforms.viscosity.value=d.viscosity;y.uniforms.elasticity.value=d.elasticity;y.uniforms.textureVelocity.value=R.texture;y.uniforms.texturePosition.value=
A.texture;y.uniforms.mousePosition.value.copy(ca);y.uniforms.mousePrev.value.copy(Ca);y.uniforms.mouseVelocity.value.copy(Ea);y.uniforms.time.value=va;G.setRenderTarget(D);G.render(O,P);c=A;A=S;S=c;Q.material=Z;Z.uniforms.textureVelocity.value=D.texture;Z.uniforms.texturePosition.value=S.texture;G.setRenderTarget(A);G.render(O,P);Fa=A;ya.setStyle(d.color1);za.setStyle(d.color2);Aa.uniforms.texturePosition.value=Fa.texture;r.uniforms.texturePosition.value=Fa.texture;r.uniforms.textureDefaultPosition.value=
X.texture;r.uniforms.camera.value=Ya.position;d.motionBlur?(L.enabled=!0,U.enabled=!0):(L.enabled=!1,U.enabled=!1);u.render()}for(var d={radius:30,viscosity:.12,elasticity:.015,color1:"#2095cc",color2:"#20cc2e",TEXTURE_WIDTH:512,TEXTURE_HEIGHT:512,quality:2,motionBlur:!0,useShadow:!0,sizeRatio:1.32,restart:!1,mobile:null==(new MobileDetect(window.navigator.userAgent)).mobile()?!1:!0,precision:"lowp"},U,L,u,Ga,Ha,w,ia={},Ka={},db=new THREE.Color,Ma,J,Na,Ra,ra,K,Qa,Pa,q,la,V,Oa,M,qa,pa,oa,ma,na,sa,
Sa,Ta,$a,ta,Ba,W,x,ka,ja,t,Va,F=new THREE.Vector2(1,1),Ca=new THREE.Vector3(999,0,0),Da=new THREE.Vector3,ca=new THREE.Vector3(999,0,0),Ea=new THREE.Vector3,bb=new THREE.Raycaster,ib=new THREE.Plane(new THREE.Vector3(0,1,0)),jb=Math,E=[[1,1,0],[-1,1,0],[1,-1,0],[-1,-1,0],[1,0,1],[-1,0,1],[1,0,-1],[-1,0,-1],[0,1,1],[0,-1,1],[0,1,-1],[0,-1,-1]],cb=[],Ia=0;256>Ia;Ia++)cb[Ia]=Math.floor(256*jb.random());for(var g=[],da=0;512>da;da++)g[da]=cb[da&255];var Q,O,P,G,Y,Z,y,Fa,A,S,D,R,C,Wa,X,l,f,N,ba=Date.now(),
ab=ba,va=0,H,Ya,ya,za,r,Aa,wa,T,xa,h={befEnlargementNear:34,befEnlargementFar:129,befEnlargementFactor:5.2,aftEnlargementNear:34,aftEnlargementFar:129,aftEnlargementFactor:1.8,befOpacityNear:0,befOpacityFar:79,befOpacityBase:.35,aftOpacityNear:0,aftOpacityFar:79,aftOpacityBase:.35},ea,fa,p,v,k,I,ha=!0,kb=new THREE.Vector3(0,200,-.1);window.onresize=function(){if(ha){ea=window.innerWidth;fa=window.innerHeight;k.aspect=ea/fa;k.updateProjectionMatrix();p.setSize(ea,fa);var b=ea,c=fa;Ga=b;Ha=c;u.setSize(b,
c)}};(function(){try{p=new THREE.WebGLRenderer({antialias:!0,failIfMajorPerformanceCaveat:!0})}catch(lb){console.error("Atomize \u2022 Hardware Acceleration not enabled or GPU not available."),ha=!1}if(ha&&WEBGL.isWebGLAvailable()){ha=!0;p.setSize(window.innerWidth,window.innerHeight);p.setPixelRatio(window.devicePixelRatio);p.background=new THREE.Color(132102);p.sortObjects=!1;p.shadowMap.type=THREE.PCFSoftShadowMap;p.shadowMap.enabled=!0;document.body.appendChild(p.domElement);v=new THREE.Scene;
v.fog=new THREE.FogExp2(132102,.0013);k=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,1,1E4);k.position.copy(kb);I=new THREE.OrbitControls(k,p.domElement);I.enablePan=!1;I.enableZoom=!1;I.enableRotate=!1;I.update();var b=v,c=k,a=window.innerWidth,e=window.innerHeight;u=new THREE.EffectComposer(p);u.setSize(a,e);Ga=a;Ha=e;b=new THREE.RenderPass(b,c);U=new THREE.SavePass(new THREE.WebGLRenderTarget(Ga,Ha,{minFilter:THREE.LinearFilter,magFilter:THREE.LinearFilter,format:THREE.RGBFormat,
stencilBuffer:!1}));L=new THREE.ShaderPass(THREE.BlendShader,"tDiffuse1");L.uniforms.tDiffuse2.value=U.renderTarget.texture;L.uniforms.mixRatio.value=.25;a=new THREE.UnrealBloomPass(new THREE.Vector2(a,e),.2,0,.19);e=new THREE.ShaderPass(THREE.CopyShader);e.renderToScreen=!0;u.addPass(b);u.addPass(L);u.addPass(U);u.addPass(a);u.addPass(e);t=new THREE.Object3D;t.position.set(0,190,0);a=new THREE.AmbientLight(3355443,1.4);t.add(a);a=new THREE.DirectionalLight(12225419,.5);a.position.set(1,1,1);t.add(a);
a=new THREE.DirectionalLight(9157300,.3);a.position.set(1,1,-1);t.add(a);a=new THREE.PointLight(10066329,1.2,1600);a.castShadow=!0;a.shadow.camera.near=10;a.shadow.camera.far=1E3;a.shadow.bias=.04;a.shadow.mapSize.width=2048;a.shadow.mapSize.height=2048;t.add(a);a=new THREE.PlaneGeometry(4E3,4E3,10,10);e=new THREE.MeshStandardMaterial({roughness:.7,metalness:1,dithering:!0,color:1779512,emissive:0});w=new THREE.Mesh(a,e);w.rotation.x=-1.57;w.position.y=-55;w.receiveShadow=!0;Ua(p,k);Xa(k);v.add(H);
v.add(t);v.add(w);eb(k,I);a=p.getContext();e="lowp";0<a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.MEDIUM_FLOAT).precision&&0<a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.MEDIUM_FLOAT).precision&&(e="mediump");0<a.getShaderPrecisionFormat(a.VERTEX_SHADER,a.HIGH_FLOAT).precision&&0<a.getShaderPrecisionFormat(a.FRAGMENT_SHADER,a.HIGH_FLOAT).precision&&(e="highp");d.precision=e;requestAnimationFrame(Za)}else{console.warn("Atomize \u2022 Initialization aborted.");a=document.getElementById("video-container");
e=document.createElement("VIDEO");e.src=".assets/media/loop.mp4";e.loop=!0;e.autoplay=!0;e.muted=!0;a.appendChild(e);a=document.getElementById("intro");e=document.getElementById("st_btn");b=document.getElementById("st_notice");c=document.getElementById("st_steps");var f=document.getElementsByTagName("BODY")[0];a.classList.add("hidden");e.classList.add("hidden");b.classList.remove("hidden");c.classList.remove("hidden");f.classList.remove("hid")}})()})();
